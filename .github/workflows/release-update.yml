name: Update HTML File with ECR Manifests

on:
  push:
    branches:
      - iryna_test  # Adjust this if you want to run on a different branch
  workflow_dispatch:  # Allows manual trigger of the workflow

jobs:
  update-html:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        
      - name: Set up AWS CLI and get ECR Token
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
        run: |
          # Set AWS credentials for ECR
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          # Login to ECR
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          
          # Update HTML File with ECR Manifests

          #!/bin/bash

          # Define variables
          OHDSI_WEBAPI_REPOSITORY_NAME="mdaca/ohdsi/webapi"
          OHDSI_ATLAS_REPOSITORY_NAME="mdaca/ohdsi/atlas"
          OHDSI_ACHILLES_REPOSITORY_NAME="mdaca/ohdsi/achilles"
          JUPYTER_HUB_REPOSITORY_NAME="mdaca/jupyter/jupyter-hub"
          JUPYTER_HTTP_PROXY_REPOSITORY_NAME="mdaca/jupyter/jupyter-http-proxy"
          JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME="mdaca/jupyter/jupyter-datascience-notebook"
          JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME="mdaca/jupyter/k8s/image-awaiter"
          JUPYTER_PAUSE_REPOSITORY_NAME="mdaca/jupyter/k8s/pause"
          JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME="mdaca/jupyter/k8s/network-tools"
          JUPYTER_SECRETS_SYNC_REPOSITORY_NAME="mdaca/jupyter/k8s/secrets-sync"
          JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME="mdaca/jupyter/k8s/kube-scheduler"
          IMAGE_TAG="latest"
          HTML_FILE="release.html"  # Update with your HTML file path

          # Fetch the image manifest from ECR for each image
          echo $JUPYTER_HUB_REPOSITORY_NAME
          MANIFEST_JUPYTER_HUB=$(aws ecr batch-get-image --repository-name "$JUPYTER_HUB_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $MANIFEST_JUPYTER_HUB
          echo $JUPYTER_HTTP_PROXY_REPOSITORY_NAME
          MANIFEST_JUPYTER_HTTP_PROXY=$(aws ecr batch-get-image --repository-name "$JUPYTER_HTTP_PROXY_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG"  --query 'images[].imageManifest' --output text)
          #CURRENT_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK=$(aws ecr describe-images --output json --repository-name $JUPYTER_HUB_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          echo $JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME
          MANIFEST_JUPYTER_DATASCIENCE_NOTEBOOK=$(aws ecr batch-get-image --repository-name "$JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME
          MANIFEST_IMAGE_AWAITER=$(aws ecr batch-get-image --repository-name "$JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $JUPYTER_PAUSE_REPOSITORY_NAME
          MANIFEST_PAUSE_PROXY=$(aws ecr batch-get-image --repository-name "$JUPYTER_PAUSE_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME
          MANIFEST_NETWORK_TOOLS=$(aws ecr batch-get-image --repository-name "$JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $JUPYTER_SECRETS_SYNC_REPOSITORY_NAME
          MANIFEST_SECRETS_SYNC=$(aws ecr batch-get-image --repository-name "$JUPYTER_SECRETS_SYNC_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME
          MANIFEST_KUBE_SCHEDULER=$(aws ecr batch-get-image --repository-name "$JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $OHDSI_WEBAPI_REPOSITORY_NAME
          MANIFEST_OHDSI_WEBAPI=$(aws ecr batch-get-image --repository-name "$OHDSI_WEBAPI_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $OHDSI_ATLAS_REPOSITORY_NAME
          MANIFEST_OHDSI_ATLAS=$(aws ecr batch-get-image --repository-name "$OHDSI_ATLAS_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $OHDSI_ACHILLES_REPOSITORY_NAME
          MANIFEST_OHDSI_ACHILLES=$(aws ecr batch-get-image --repository-name "$OHDSI_ACHILLES_REPOSITORY_NAME" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          

          CURRENT_VERSION_JUPYTER_HUB=$(aws ecr describe-images --output json --repository-name $JUPYTER_HUB_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
           echo $CURRENT_VERSION_JUPYTER_HUB
          CURRENT_VERSION_JUPYTER_HTTP_PROXY=$(aws ecr describe-images --output json --repository-name $JUPYTER_HTTP_PROXY_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK=$(aws ecr describe-images --output json --repository-name $JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_JUPYTER_PAUSE=$(aws ecr describe-images --output json --repository-name $JUPYTER_PAUSE_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_JUPYTER_KUBE_SCHEDULER=$(aws ecr describe-images --output json --repository-name $JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_JUPYTER_IMAGE_AWAITER=$(aws ecr describe-images --output json --repository-name $JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_JUPYTER_NETWORK_TOOLS=$(aws ecr describe-images --output json --repository-name $JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_JUPYTER_SECRETS_SYNC=$(aws ecr describe-images --output json --repository-name $JUPYTER_SECRETS_SYNC_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_OHDSI_WEBAPI=$(aws ecr describe-images --output json --repository-name $OHDSI_WEBAPI_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_OHDSI_ATLAS=$(aws ecr describe-images --output json --repository-name $OHDSI_ATLAS_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          CURRENT_VERSION_OHDSI_ACHILLES=$(aws ecr describe-images --output json --repository-name $OHDSI_ACHILLES_REPOSITORY_NAME --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[1]' | jq . --raw-output)
          echo $CURRENT_VERSION_OHDSI_ACHILLES

          # Check if the commands were successful
          if [ $? -ne 0 ]; then
            echo "Error fetching image manifest."
            exit 1
          fi


        
          echo "Read the current version from the HTML file"
          
          # Read the current version from the HTML file
          OLD_VERSION_JUPYTER_HUB=$(grep -oP 'data-name="jupyter-hub" data-version="\K[^"]+' "$HTML_FILE")
          echo $OLD_VERSION_JUPYTER_HUB
          OLD_VERSION_JUPYTER_HTTP_PROXY=$(grep -oP 'data-name="jupyter-http-proxy" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK=$(grep -oP 'data-name="jupyter-datascience-notebook" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_PAUSE=$(grep -oP 'data-name="jupyter-k8s-pause" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_KUBE_SCHEDULER=$(grep -oP 'data-name="jupyter-k8s-kube-scheduler" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_IMAGE_AWAITER=$(grep -oP 'data-name="jupyter-k8s-image-awaiter" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_NETWORK_TOOLS=$(grep -oP 'data-name="jupyter-k8s-network-tools" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_SECRETS_SYNC=$(grep -oP 'data-name="jupyter-k8s-secrets-sync" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_OHDSI_WEBAPI=$(grep -oP 'data-name="ohdsi-webapi" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_OHDSI_ATLAS=$(grep -oP 'data-name="ohdsi-atlas" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_OHDSI_ACHILLES=$(grep -oP 'data-name="ohdsi-achilles" data-version="\K[^"]+' "$HTML_FILE")

          # Compare versions for each image
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_HUB" "$OLD_VERSION_JUPYTER_HUB"
          result_jupyter_hub=$?
          echo $result_jupyter_hub
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_HTTP_PROXY" "$OLD_VERSION_JUPYTER_HTTP_PROXY"
          result_jupyter_http_proxy=$?
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK" "$OLD_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK"
          result_jupyter_datascience_notebook=$?
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_PAUSE" "$OLD_VERSION_JUPYTER_PAUSE"
          result_jupyter_pause=$?
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_KUBE_SCHEDULER" "$OLD_VERSION_JUPYTER_KUBE_SCHEDULER"
          result_jupyter_kube_scheduler=$?
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_NETWORK_TOOLS" "$OLD_VERSION_NETWORK_TOOLS"
          result_jupyter_network_tools=$?
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_SECRETS_SYNC" "$OLD_VERSION_JUPYTER_SECRETS_SYNC"
          result_jupyter_secrets_sync=$?
          ./version_compare.sh "$CURRENT_VERSION_JUPYTER_IMAGE_AWAITER" "$OLD_VERSION_JUPYTER_IMAGE_AWAITER"
          result_jupyter_image_awaiter=$?
          ./version_compare.sh "$CURRENT_VERSION_OHDSI_WEBAPI" "$OLD_VERSION_OHDSI_WEBAPI"
          result_ohdsi_webapi=$?
          ./version_compare.sh "$CURRENT_VERSION_OHDSI_ATLAS" "$OLD_VERSION_OHDSI_ATLAS"
          result_ohdsi_atlas=$?
          ./version_compare.sh "$CURRENT_VERSION_OHDSI_ACHILLES" "$OLD_VERSION_OHDSI_ACHILLES"
          result_ohdsi_achilles=$?
          
          echo "results compared"

          # Update the HTML file if the new version is greater
          if [ $result_jupyter_hub -eq 0 ]; then
              echo "Updating Jupyter Hub manifest in HTML file."
        
          else
              echo "No update for Jupyter Hub new version is not greater than old version."
          fi

          if [ $result_jupyter_http_proxy -eq 0 ]; then
              echo "Updating Jupyter HTTP Proxy manifest in HTML file."
             
              
          else
              echo "No update for Jupyter HTTP Proxy new version is not greater than old version."
          fi

          if [ $result_jupyter_datascience_notebook -eq 0 ]; then
              echo "Updating Jupyter DataScience Notebook manifest in HTML file."
             
              
          else
              echo "No update for Jupyter DataScience Notebook new version is not greater than old version."
          fi

          if [ $result_jupyter_pause -eq 0 ]; then
              echo "Updating Jupyter k8s Pause manifest in HTML file."
             
              
          else
              echo "No update for Jupyter K8s Pause new version is not greater than old version."
          fi

          if [ $result_jupyter_kube_scheduler -eq 0 ]; then
              echo "Updating Jupyter K8s Kube Scheduler manifest in HTML file."
             
          else
              echo "No update for Jupyter K8s Kube Scheduler  new version is not greater than old version."
          fi

          if [ $result_jupyter_image_awaiter -eq 0 ]; then
              echo "Updating Jupyter Image Awaiter manifest in HTML file."
             
          else
              echo "No update for Jupyter Image Awaiter  new version is not greater than old version."
          fi

          if [ $result_jupyter_network_tools -eq 0 ]; then
              echo "Updating Jupyter Network Tools manifest in HTML file."
  
          else
              echo "No update for Jupyter Network Tools  new version is not greater than old version."
          fi

          if [ $result_jupyter_secrets_sync -eq 0 ]; then
              echo "Updating Jupyter Secret Sync manifest in HTML file."
             
          else
              echo "No update for Jupyter Secrets Sync  new version is not greater than old version."
          fi

          if [ $result_ohdsi_webapi -eq 0 ]; then
              echo "Updating OHDSI WEBAPI manifest in HTML file."
            
          else
              echo "No update for OHDSI WEBAPI  new version is not greater than old version."
          fi

          if [ $result_ohdsi_achilles -eq 0 ]; then
              echo "Updating OHDSI Achilles manifest in HTML file."
              
          else
              echo "No update for OHDSI Achilles  new version is not greater than old version."
          fi

          if [ $result_ohdsi_atlas -eq 0 ]; then
              echo "Updating OHDSI ATLAS manifest in HTML file."
             
          else
              echo "No update for OHDSI ATLAS  new version is not greater than old version."
          fi
