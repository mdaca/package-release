name: Update HTML File with ECR Manifests

on:
  push:
    branches:
      - iryna_test  # Adjust this if you want to run on a different branch
  workflow_dispatch:  # Allows manual trigger of the workflow

jobs:
  update-html:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2
        
      - name: Set up AWS CLI and get ECR Token
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
        run: |
          echo "Set AWS credentials and login to ECR"
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          
          echo "Update HTML File with ECR Manifests"

          #!/bin/bash

          # Define variables
          OHDSI_WEBAPI_REPOSITORY_NAME="mdaca/ohdsi/webapi"
          OHDSI_ATLAS_REPOSITORY_NAME="mdaca/ohdsi/atlas"
          OHDSI_ACHILLES_REPOSITORY_NAME="mdaca/ohdsi/achilles"
          JUPYTER_HUB_REPOSITORY_NAME="mdaca/jupyter/jupyter-hub"
          JUPYTER_HTTP_PROXY_REPOSITORY_NAME="mdaca/jupyter/jupyter-http-proxy"
          JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME="mdaca/jupyter/jupyter-datascience-notebook"
          JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME="mdaca/jupyter/k8s/image-awaiter"
          JUPYTER_PAUSE_REPOSITORY_NAME="mdaca/jupyter/k8s/pause"
          JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME="mdaca/jupyter/k8s/network-tools"
          JUPYTER_SECRETS_SYNC_REPOSITORY_NAME="mdaca/jupyter/k8s/secrets-sync"
          JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME="mdaca/jupyter/k8s/kube-scheduler"
          IMAGE_TAG="latest"
          HTML_FILE="release.html"  # Update with your HTML file path

          get_manifest(){
          rep_name=$1
          manifest_value=$(aws ecr batch-get-image --repository-name "$rep_name" --region us-east-2 --image-ids imageTag="$IMAGE_TAG" --query 'images[].imageManifest' --output text)
          echo $manifest_value
          }

          # Fetch the image manifest from ECR for each image
          echo $JUPYTER_HUB_REPOSITORY_NAME
          MANIFEST_JUPYTER_HUB=$(get_manifest $JUPYTER_HUB_REPOSITORY_NAME)
          echo $MANIFEST_JUPYTER_HUB
          #echo $JUPYTER_HTTP_PROXY_REPOSITORY_NAME
          MANIFEST_JUPYTER_HTTP_PROXY=$(get_manifest $JUPYTER_HTTP_PROXY_REPOSITORY_NAME)
          echo $MANIFEST_JUPYTER_HTTP_PROXY
          echo $JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME
          MANIFEST_JUPYTER_DATASCIENCE_NOTEBOOK=$(get_manifest $JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME)
          echo $MANIFEST_JUPYTER_DATASCIENCE_NOTEBOOK
          echo $JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME
          MANIFEST_IMAGE_AWAITER=$(get_manifest $JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME)
          echo $MANIFEST_IMAGE_AWAITER
          echo $JUPYTER_PAUSE_REPOSITORY_NAME
          MANIFEST_PAUSE_PROXY=$(get_manifest $JUPYTER_PAUSE_REPOSITORY_NAME)
          echo $MANIFEST_PAUSE_PROXY
          echo $JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME
          MANIFEST_JUPYTER_NETWORK_TOOLS=$(get_manifest $JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME)
          echo $MANIFEST_JUPYTER_NETWORK_TOOLS
          echo $JUPYTER_SECRETS_SYNC_REPOSITORY_NAME
          MANIFEST_SECRETS_SYNC=$(get_manifest $JUPYTER_SECRETS_SYNC_REPOSITORY_NAME)
          echo $MANIFEST_SECRETS_SYNC
          echo $JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME
          MANIFEST_KUBE_SCHEDULER=$(get_manifest $JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME)
          echo $MANIFEST_KUBE_SCHEDULER
          echo $OHDSI_WEBAPI_REPOSITORY_NAME
          MANIFEST_OHDSI_WEBAPI=$(get_manifest $OHDSI_WEBAPI_REPOSITORY_NAME)
          echo $MANIFEST_OHDSI_WEBAPI
          echo $OHDSI_ATLAS_REPOSITORY_NAME
          MANIFEST_OHDSI_ATLAS=$(get_manifest $OHDSI_ATLAS_REPOSITORY_NAME)
          echo $MANIFEST_OHDSI_ATLAS
          echo $OHDSI_ACHILLES_REPOSITORY_NAME
          MANIFEST_OHDSI_ACHILLES=$(get_manifest $OHDSI_ACHILLES_REPOSITORY_NAME)
          echo $MANIFEST_OHDSI_ACHILLES

          filter_version(){
          rep_name=$1
          describe_image=$(aws ecr describe-images --output json --repository-name $rep_name --query 'sort_by(imageDetails,& imagePushedAt)[-1]') 
          echo $describe_image
          CURRENT_VERSION=$(echo "$describe_image" | jq -r '.imageTags[] | select(. != "latest")')
          echo "$CURRENT_VERSION"
          }

          CURRENT_VERSION_JUPYTER_HUB=$(filter_version $JUPYTER_HUB_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_HUB    
          CURRENT_VERSION_JUPYTER_HTTP_PROXY=$(filter_version $JUPYTER_HTTP_PROXY_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_HTTP_PROXY
          CURRENT_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK=$(filter_version $JUPYTER_DATASCIENCE_NOTEBOOK_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK
          CURRENT_VERSION_JUPYTER_PAUSE=$(filter_version $JUPYTER_PAUSE_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_PAUSE
          CURRENT_VERSION_JUPYTER_KUBE_SCHEDULER=$(filter_version $JUPYTER_KUBE_SCHEDULER_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_KUBE_SCHEDULER
          CURRENT_VERSION_JUPYTER_IMAGE_AWAITER=$(filter_version $JUPYTER_IMAGE_AWAITER_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_IMAGE_AWAITER
          CURRENT_VERSION_JUPYTER_NETWORK_TOOLS=$(filter_version $JUPYTER_NETWORK_TOOLS_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_NETWORK_TOOLS
          CURRENT_VERSION_JUPYTER_SECRETS_SYNC=$(filter_version $JUPYTER_SECRETS_SYNC_REPOSITORY_NAME)
          echo $CURRENT_VERSION_JUPYTER_SECRETS_SYNC
          CURRENT_VERSION_OHDSI_WEBAPI=$(filter_version $OHDSI_WEBAPI_REPOSITORY_NAME)
          echo $CURRENT_VERSION_OHDSI_WEBAPI
          CURRENT_VERSION_OHDSI_ATLAS=$(filter_version $OHDSI_ATLAS_REPOSITORY_NAME)
          echo $CURRENT_VERSION_OHDSI_ATLAS
          CURRENT_VERSION_OHDSI_ACHILLES=$(filter_version $OHDSI_ACHILLES_REPOSITORY_NAME)
          echo $CURRENT_VERSION_OHDSI_ACHILLES

          # Check if the commands were successful
          if [ $? -ne 0 ]; then
            echo "Error fetching image manifest."
            exit 1
          fi

          # Function to compare version strings
          version_compare() {
            if [[ "$1" == "$2" ]]; then
              echo 2
              return
            fi

            IFS='.' read -r -a ver1 <<< "$1"
            IFS='.' read -r -a ver2 <<< "$2"

            for (( i=0; i<${#ver1[@]}; i++ )); do
              v1=${ver1[i]:-0}
              v2=${ver2[i]:-0}

              if (( 10#$v1 > 10#$v2 )); then
                echo 0
                return
              elif (( 10#$v1 < 10#$v2 )); then
                echo 1
                return
              fi
            done
            echo 2
          }

          # Read the current version from the HTML file
          OLD_VERSION_JUPYTER_HUB=$(grep -oP 'data-name="jupyter-hub" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_HTTP_PROXY=$(grep -oP 'data-name="jupyter-http-proxy" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK=$(grep -oP 'data-name="jupyter-datascience-notebook" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_PAUSE=$(grep -oP 'data-name="jupyter-k8s-pause" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_KUBE_SCHEDULER=$(grep -oP 'data-name="jupyter-k8s-kube-scheduler" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_IMAGE_AWAITER=$(grep -oP 'data-name="jupyter-k8s-image-awaiter" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_NETWORK_TOOLS=$(grep -oP 'data-name="jupyter-k8s-network-tools" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_JUPYTER_SECRETS_SYNC=$(grep -oP 'data-name="jupyter-k8s-secrets-sync" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_OHDSI_WEBAPI=$(grep -oP 'data-name="ohdsi-webapi" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_OHDSI_ATLAS=$(grep -oP 'data-name="ohdsi-atlas" data-version="\K[^"]+' "$HTML_FILE")
          OLD_VERSION_OHDSI_ACHILLES=$(grep -oP 'data-name="ohdsi-achilles" data-version="\K[^"]+' "$HTML_FILE")

          # Compare versions for each image
          result_jupyter_hub=$(version_compare "$CURRENT_VERSION_JUPYTER_HUB" "$OLD_VERSION_JUPYTER_HUB")
          result_jupyter_http_proxy=$(version_compare "$CURRENT_VERSION_JUPYTER_HTTP_PROXY" "$OLD_VERSION_JUPYTER_HTTP_PROXY")
          result_jupyter_datascience_notebook=$(version_compare "$CURRENT_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK" "$OLD_VERSION_JUPYTER_DATASCIENCE_NOTEBOOK")
          result_jupyter_pause=$(version_compare "$CURRENT_VERSION_JUPYTER_PAUSE" "$OLD_VERSION_JUPYTER_PAUSE")
          result_jupyter_kube_scheduler=$(version_compare "$CURRENT_VERSION_JUPYTER_KUBE_SCHEDULER" "$OLD_VERSION_JUPYTER_KUBE_SCHEDULER")
          result_jupyter_image_awaiter=$(version_compare "$CURRENT_VERSION_JUPYTER_IMAGE_AWAITER" "$OLD_VERSION_JUPYTER_IMAGE_AWAITER")
          result_jupyter_network_tools=$(version_compare "$CURRENT_VERSION_JUPYTER_NETWORK_TOOLS" "$OLD_VERSION_JUPYTER_NETWORK_TOOLS")
          result_jupyter_secrets_sync=$(version_compare "$CURRENT_VERSION_JUPYTER_SECRETS_SYNC" "$OLD_VERSION_JUPYTER_SECRETS_SYNC")
          result_ohdsi_webapi=$(version_compare "$CURRENT_VERSION_OHDSI_WEBAPI" "$OLD_VERSION_OHDSI_WEBAPI")
          result_ohdsi_atlas=$(version_compare "$CURRENT_VERSION_OHDSI_ATLAS" "$OLD_VERSION_OHDSI_ATLAS")
          result_ohdsi_achilles=$(version_compare "$CURRENT_VERSION_OHDSI_ACHILLES" "$OLD_VERSION_OHDSI_ACHILLES")     

                    # Update the HTML file if the new version is greater
                if [ $result_jupyter_hub -eq 0 ]; then
              echo "Updating Jupyter Hub manifest in HTML file."
              ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_HUB" | sed 's/[&/\]/\\&/g')
              awk -v MANIFEST_JUPYTER_HUB="$ESCAPED_MANIFEST" '{
              gsub(/<MANIFEST_JUPYTER_HUB_PLACEHOLDER>/, MANIFEST_JUPYTER_HUB);
              print;
              }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
              else
                echo "No update for Jupyter Hub: new version is not greater than old version."
              fi
    
              if [ $result_jupyter_http_proxy -eq 0 ]; then
              echo "Updating Jupyter HTTP Proxy manifest in HTML file."
              ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_HTTP_PROXY" | sed 's/[&/\]/\\&/g')
              awk -v MANIFEST_JUPYTER_HTTP_PROXY="$ESCAPED_MANIFEST" '{
              gsub(/<MANIFEST_JUPYTER_HTTP_PROXY_PLACEHOLDER>/, MANIFEST_JUPYTER_HTTP_PROXY);
              print;
              }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
              else
                echo "No update for Jupyter HTTP Proxy: new version is not greater than old version."
              fi
    
              if [ $result_jupyter_datascience_notebook -eq 0 ]; then
              echo "Updating Jupyter DataScience Notebook manifest in HTML file."
              ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_DATASCIENCE_NOTEBOOK" | sed 's/[&/\]/\\&/g')
              awk -v MANIFEST_JUPYTER_DATASCIENCE_NOTEBOOK="$ESCAPED_MANIFEST" '{
              gsub(/<MANIFEST_JUPYTER_DATASCIENCE_PLACEHOLDER>/, MANIFEST_JUPYTER_DATASCIENCE_NOTEBOOK);
              print;
              }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"  
              else
              echo "No update for Jupyter DataScience Notebook: new version is not greater than old version."
              fi
    
              if [ $result_jupyter_pause -eq 0 ]; then
              echo "Updating Jupyter k8s Pause manifest in HTML file."
                  ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_PAUSE" | sed 's/[&/\]/\\&/g')
                  awk -v MANIFEST_JUPYTER_PAUSE="$ESCAPED_MANIFEST" '{
                  gsub(/<MANIFEST_JUPYTER_PAUSE_PLACEHOLDER>/, MANIFEST_JUPYTER_PAUSE);
                  print;
                  }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
              else
              echo "No update for Jupyter K8s Pause: new version is not greater than old version."
              fi

            if [ $result_jupyter_kube_scheduler -eq 0 ]; then
                echo "Updating Jupyter K8s Kube Scheduler manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_KUBE_SCHEDULER" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_JUPYTER_KUBE_SCHEDULER="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_JUPYTER_KUBE_SCHEDULER_PLACEHOLDER>/, MANIFEST_JUPYTER_KUBE_SCHEDULER);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
            else
                echo "No update for Jupyter K8s Kube Scheduler : new version is not greater than old version."
            fi
            
            if [ $result_jupyter_image_awaiter -eq 0 ]; then
                echo "Updating Jupyter Image Awaiter manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_IMAGE_AWAITER" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_JUPYTER_IMAGE_AWAITER="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_JUPYTER_IMAGE_AWAITER_PLACEHOLDER>/, MANIFEST_JUPYTER_IMAGE_AWAITER);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"   
            else
                echo "No update for Jupyter Image Awaiter : new version is not greater than old version."
            fi
            
            if [ $result_jupyter_network_tools -eq 0 ]; then
                echo "Updating Jupyter Network Tools manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_NETWORK_TOOLS" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_JUPYTER_NETWORK_TOOLS="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_JUPYTER_NETWORK_TOOLS_PLACEHOLDER>/, MANIFEST_JUPYTER_NETWORK_TOOLS);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
            else
                echo "No update for Jupyter Network Tools : new version is not greater than old version."
            fi
            
            if [ $result_jupyter_secrets_sync -eq 0 ]; then
                echo "Updating Jupyter Secret Sync manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_JUPYTER_SECRETS_SYNC" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_JUPYTER_SECRETS_SYNC="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_JUPYTER_SECRETS_SYNC_PLACEHOLDER>/, MANIFEST_JUPYTER_SECRETS_SYNC);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
            else
                echo "No update for Jupyter Secrets Sync : new version is not greater than old version."
            fi
            
            if [ $result_ohdsi_webapi -eq 0 ]; then
                echo "Updating OHDSI WEBAPI manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_OHDSI_WEBAPI" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_OHDSI_WEBAPI="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_OHDSI_WEBAPI_PLACEHOLDER>/, MANIFEST_OHDSI_WEBAPI);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
            else
                echo "No update for OHDSI WEBAPI : new version is not greater than old version."
            fi
            
            if [ $result_ohdsi_achilles -eq 0 ]; then
                echo "Updating OHDSI Achilles manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_OHDSI_ACHILLES" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_OHDSI_ACHILLES="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_OHDSI_ACHILLES_PLACEHOLDER>/, MANIFEST_OHDSI_ACHILLES);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
            else
                echo "No update for OHDSI Achilles : new version is not greater than old version."
            fi
            
            if [ $result_ohdsi_atlas -eq 0 ]; then
                echo "Updating OHDSI ATLAS manifest in HTML file."
                ESCAPED_MANIFEST=$(printf '%s' "$MANIFEST_OHDSI_ATLAS" | sed 's/[&/\]/\\&/g')
                awk -v MANIFEST_OHDSI_ATLAS="$ESCAPED_MANIFEST" '{
                gsub(/<MANIFEST_OHDSI_ATLAS_PLACEHOLDER>/, MANIFEST_OHDSI_ATLAS);
                print;
                }' "$HTML_FILE" > "$HTML_FILE.tmp" && mv "$HTML_FILE.tmp" "$HTML_FILE"
            else       
                echo "No update for OHDSI ATLAS : new version is not greater than old version."
            fi
          #rm -f "$HTML_FILE.bak"
    
          # Commit and push changes
          git config --local user.name "${{ github.actor }}"
          git config --local user.email "developer@mdaca.io"
          git status
          #git add $HTML_FILE
          #git commit -m "Update HTML file with new ECR manifests [skip ci]" || echo "No changes to commit"
          #git push origin iryna_test
          
